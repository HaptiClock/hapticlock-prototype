* Hapticlock
HaptiClock is a haptic clock device which communicates the time via haptics. Currently, it runs on a Raspberry Pi Pico W board, which uses the RP2040 microcontroller, and uses the following components:
1. [[https://www.adafruit.com/product/2305][Adafruit Haptic Controller]] - 2
2. Haptic motors ([[https://www.adafruit.com/product/1201][also from Adafruit]]) - 2
3. [[https://www.adafruit.com/product/1982][Adafruit 12-key Capacitive Touch Sensor]] - 1
4. Force-sensitive resistor ([[https://www.adafruit.com/product/166][also from Adafruit]]) - 1
5. Woven conductive fabric ([[https://www.adafruit.com/product/1168][also from Adafruit]])

HaptiClock is currently in development on a breadboard, and the [[file:circuit-photo.png][circuit-photo.png]] file shows the circuitry as of commit =303a21c=. We plan to use plastic housing shaped like a computer mouse, and will have a 3D-printed model within one week.

_How It Works_
HaptiClock works by using haptic vibrations to communicate the time. The user begins by touching two motors, each with one finger. The motors will then vibrate a certain number of times. Currently, the left motor communicates the hours and the right motor the minutes. Specifically, the left motor will buzz once per hour; if the hours are greater than twelve, the left motor begins with a double buzz haptic effect. Similarly, the right motor will buzz once per every five minutes, beginning with a double buzz if the minutes are greater than 30.

For example, if the time is 6:46 AM, the left motor will buzz six times and then the right motor will buzz nine times (46 minutes divided into groups of 5 minutes, rounding down, is nine). Some more examples, expressed compactly:
- 6:49 AM: left buzz 6x -> right buzz 10 (rounding 49min up to 50min)
** Roadmap
*** Hardware
**** TODO Add RTC
Find one that has a compatible library. Probably Adafruit.
**** Archive :ARCHIVE:
***** DONE Test haptic motor range
:PROPERTIES:
:ARCHIVE_TIME: 2024-09-07 Sat 23:28
:END:
Observe motor response for 2-5V input.
*** Software
**** Time Protocols
***** TODO Add support for integer protocol
***** TODO Add support for MM-To-HH mode
e.g. it's 10 minutes to 7pm.
***** TODO Add support for 12 hour time
**** TODO Consider how to communicate 00
If HH or MM is 00, or rounds down to 00, how should that be communicated? The user should not end up thinking they've missed the minutes, or that it's not working.
**** TODO Add force sensor
**** TODO Add RTC
**** TODO Add support for concurrent haptics
**** TODO Calibration mode for capacitive touch
Is this even necessary?
**** TODO Calibration for haptic drivers
**** Archive :ARCHIVE:
***** DONE Add Hapticlock class to store all sensors
:PROPERTIES:
:ARCHIVE_TIME: 2024-09-07 Sat 23:28
:END:
***** DONE Add second capacitive touch
:PROPERTIES:
:ARCHIVE_TIME: 2024-09-07 Sat 23:28
:END:
***** DONE Rewrite =checkCapacitiveEvents()= to handle second capacitive touch
:PROPERTIES:
:ARCHIVE_TIME: 2024-09-07 Sat 23:28
:END:
***** DONE Add haptic breakout boards
:PROPERTIES:
:ARCHIVE_TIME: 2024-09-07 Sat 23:28
:END:
***** DONE Figure out class system for haptic and time sequence building and actuating
:PROPERTIES:
:ARCHIVE_TIME: 2024-09-07 Sat 23:29
:END:
*** Haptic Time Protocol
A Haptic Time Protocol (HTP) is necessary to define how time will be transmitted via haptics. This protocol is intended to be independent of hardware.
**** Design Characteristics
1. Precision: what time precision does the protocol allow? Seconds, minutes, five minutes?
2. Number of fingers: how many motors are used?
3. Haptic motor: which haptic motor(s) is being used to transmit the signal?
4. Haptic characteristics: what haptic sequences are used? A simple pulse? A decaying pulse? Double-pulses? At what intensity and duration?
**** Precision
- Seconds is unnecessary to know when waking up.
- Minutes is necessary, but maybe to nearest five or ten.
- Hours is necessary, down to nearest hour.
- Can have different protocol if before early time, e.g. 4AM
**** Number of Fingers
_One_
- Pros
  - Simpler mechanical, electrical, and software design
  - User only has to achieve correct placement of one finger
  - User only has to mentally focus on one finger
- Cons
  - User cannot differentiate data types based on different finger (must use other haptic characteristics to denote data types, e.g. communicating hours vs. minutes)

_Two_
- Pros
  - Doubles the protocol message space
  - Easy to differentiate data types with two fingers (either one, or the other)
- Cons
  - User must achieve correct placement of two fingers
  - More complex design

_Three and above_
- Pros
  - Even greater protocol message space
- Cons
  - Requires some mental effort to differentiate data types with three fingers (not simply binary, as it was with two fingers)
  - User must achieve placement of three fingers
  - More complex design
*** Housing
**** TODO Determine external features
- capacitive fabric overlay zone(s)
- holes for haptic motors
- hole(s) for force sensor
- hole for charging cable
- hole for battery
**** TODO Determine internal features
- structural frame
- slots for haptic motors
- slots for force sensor
- battery holder
- PCB holder
**** TODO Design haptic motor tester
Design a small housing to test a single haptic motor. This is necessary to tune the haptic feedback.
*** Configuration Interface
**** TODO Web server over WiFi
Configurable settings
- buzz intensities
- buzz lengths
- buzz wait times
**** TODO Launch web server with special tap and force sequence
**** TODO Determine how to store changes to configuration parameters
Config file parsed by the software?
